#include <iostream>
#include <stdio.h>
#include <new>
#include <ctype.h>
#include <stdlib.h>
#include <windows.h>
using namespace std;
struct Fruta {
     char nome[20], descricao[500];
     struct Fruta *pProx;
} frutas, *pAux_fruta, *pLer_fruta;

struct Dicionario {
     char inicial;
     int quant, pos;
     struct Dicionario *pProx;
     struct Dicionario *pAnt;
     Fruta inicio_fruta;
} inicio_dicio, *pAux_dicio, *pSal, *pAnt_dicio;

//************************Variáveis globais
char palavra[20], letra;
int cont_linha = 1;

HANDLE console = GetStdHandle(STD_OUTPUT_HANDLE);
COORD CursorPosition;

void gotoxy(int x, int y){
 CursorPosition.X = x; // Locates column
 CursorPosition.Y = y; // Locates Row
 SetConsoleCursorPosition(console,CursorPosition); // Sets position for next thing to be printed
}

/****************** FUNCAO VERIFICAR NODO ******************/
int inicial_existe(char let){//verificação da inicial para inserir
    pAux_dicio = &inicio_dicio;
    while((pAux_dicio->pProx) && (toupper(pAux_dicio->inicial) != toupper(let))){
        pAnt_dicio = pAux_dicio;
        pAux_dicio = pAux_dicio->pProx;
    }
    if(toupper(pAux_dicio->inicial) == toupper(let)) { //Inicial existe
        return 1;
    } else {
        return 0;
    }
}

/****************** FUNCAO SALVAR ******************/
void gravar(){
    FILE *pont_arq;
    pont_arq = fopen("dicionario.txt", "w");
    if(pont_arq) {
        if(inicio_dicio.pProx != NULL) {
            pSal = inicio_dicio.pProx; /* aponta para o inicio do dicionario */
             while(pSal){
                 pAux_fruta = pSal->inicio_fruta.pProx;/* aponta para o inicio da lista de frutas */
                 while(pAux_fruta) {
                    fprintf(pont_arq, "%s\n", pAux_fruta->nome);
                    fprintf(pont_arq, "%s\n", pAux_fruta->descricao);
                    pAux_fruta = pAux_fruta->pProx; //Passa para a próxima fruta
             }
            pSal = pSal->pProx; //Passa para a próxima letra
        }
        fclose(pont_arq);
    }
    else {
        cout << "Erro ao gravar arquivo!";
        system("pause");
    }
  }
  pAux_dicio = NULL;
  pAux_fruta = NULL;
}

void ler(){
    char lido[500];
    int etapa=0;
    FILE *pont_arq;
    pont_arq = fopen("dicionario.txt", "r");
    if(pont_arq) {
      pAux_dicio = &inicio_dicio;
      while(!feof(pont_arq)) {
          if(fgets(lido, 500, pont_arq)) {
            lido[strlen(lido)-1] = '\0';
            switch(etapa) {
            case 0:
                if(inicial_existe(lido[0]) == 0){
                    pAux_dicio->pProx = new Dicionario;
                    pAux_dicio = pAux_dicio->pProx;
                    pAux_dicio->pProx = NULL;
                    pAux_dicio->inicial = lido[0];
                    pLer_fruta = &pAux_dicio->inicio_fruta;
                    pLer_fruta->pProx = new Fruta;
                    pAux_fruta = pLer_fruta->pProx;
                    strcpy(pAux_fruta->nome, lido);
                } else {
                    pLer_fruta = &pAux_dicio->inicio_fruta;
                    while(pLer_fruta->pProx){
                        pLer_fruta->pProx;
                    }
                    pLer_fruta->pProx = new Fruta;
                    pAux_fruta = pLer_fruta->pProx;
                }
                strcpy(pAux_fruta->nome, lido);
            break;
            case 1:
                strcpy(pAux_fruta->descricao, lido);
                etapa = -1;
                break;
            }
            etapa++;
          }
      }
    }
    else{
     cout << "Sem dados no arquivo\n";
     system("pause");
    }

}//função onde devemos ordenar a partir do arquivo;



void inserir_fruta(){
    pAux_dicio = &inicio_dicio;
    gotoxy(0, 1);
    cout << "Informe a fruta que deseja inserir: ";
    gotoxy(0, 2);
    cout << "Descrição da fruta: ";
    gotoxy(37, 1);
    fflush(stdin);
    gets(palavra);
    //Verifica inicial

    while((pAux_dicio->pProx) && (toupper(pAux_dicio->inicial) != toupper(palavra[0]))){
        pAnt_dicio = pAux_dicio;
        pAux_dicio = pAux_dicio->pProx;
    }
    if(pAux_dicio->inicial != palavra[0]) { //Inicial não encontrada
        pAux_dicio->pProx = new Dicionario; //Cria novo nodo para essa inicial
        pAux_dicio = pAux_dicio->pProx;
        pAux_dicio->inicial = palavra[0];
        pAux_dicio->pProx = NULL; //Faz o próximo item(último) apontar para nulo(necessário)
    }
    //Validar palavra
    pAux_fruta = &pAux_dicio->inicio_fruta;
    while((pAux_fruta->pProx) && (strcmp(pAux_fruta->nome, palavra) != 0)) {
        pAux_fruta = pAux_fruta->pProx;
    }
    if(strcmp(pAux_fruta->nome, palavra) == 0) { //Palavra já inserida
        cout << "Fruta já inserida!";
    } else { //Cria espaço para nova fruta
        pAux_dicio->quant++;
        pAux_fruta->pProx = new Fruta;
        pAux_fruta = pAux_fruta->pProx;
        strcpy(pAux_fruta->nome, palavra);
        gotoxy(21, 2);
        fflush(stdin);
        gets(pAux_fruta->descricao);
    }
    gravar();
    pAux_dicio = NULL;
    pAux_fruta = NULL;
}

Fruta* buscar(){

}

 void excluir_inicial(){

 }

 void excluir_fruta(){

 }

 void menu_excluir(){

 }

 void alterar(){

 }
void cabecalhoExibir() {
    gotoxy(0, cont_linha);
    cout << "Nome ";
    gotoxy(20, cont_linha);
    cout << "| Descrição ";
    gotoxy(0, cont_linha+1);
    cout << "-------------------------------------------------------";
    cont_linha++;
}

void exibir_fruta(){
    gotoxy(0, cont_linha+1);
    cout << pAux_fruta->nome;
    gotoxy(20, cont_linha+1);
    cout << "| " << pAux_fruta->descricao;
    cont_linha++;
}

 void exibir_inicial(){ //todas palavras de tal letra
    pAux_dicio = &inicio_dicio;
    cout << "Inicial: ";
    cin >> letra;
    while((pAux_dicio->pProx) && (toupper(pAux_dicio->inicial) != toupper(letra))){
        pAux_dicio = pAux_dicio->pProx;
    }
    if(toupper(pAux_dicio->inicial) != toupper(letra)) { //Inicial não encontrada
        cout << "Essa inicial não existe!";
        system("pause");
    } else {
        cabecalhoExibir();
        pAux_fruta = &pAux_dicio->inicio_fruta;
        while(pAux_fruta->pProx) {
            pAux_fruta = pAux_fruta->pProx;
            exibir_fruta();
        }
        cout << "\n";
    }
 }


void exibir_relevancia(){//exibir quantas vezes foram buscadas todas da lista

}

void listar_remisso(){//exibir como tá no arquivo
    if(inicio_dicio.pProx) {
        cabecalhoExibir();
        pAux_dicio = &inicio_dicio;
        while(pAux_dicio->pProx) {
            pAux_dicio = pAux_dicio->pProx;
            pAux_fruta = &pAux_dicio->inicio_fruta;
            while(pAux_fruta->pProx) {
                pAux_fruta = pAux_fruta->pProx;
                exibir_fruta();
            }
        }
        cout << "\n";
    } else {
        cout << "Não existem registros de frutas!";
    }
}

void menu_exibir(){
int op=1;
    do{
       system("cls");
       cout<<"\t\tComo deseja exibir?\n";
       cout<<"Voltar-0\nExibir remisso-1\nExibir letra-2\nExibir Fruta-3\n:";
       cin>>op;
       switch(op){
       case 0:
       break;
       case 1:
           system("cls");
           listar_remisso();
           system("pause");
       break;
       case 2:
           system("cls");
           exibir_inicial();
           system("pause");
       break;
       case 3:
           system("cls");
           system("pause");
       break;
       default:
        cout<<"\nOpção inválida, tente novamente!\n";
        system("pause");
       break;
       }
    }while(op!=0);
}

 void ordenar(){//escolhe como serão ordenadas as palavras(alfabética, criação e randomica);

 }

void menu(){
    int op=1;
    do{
       system("cls");
       cout<<"\t\tO QUE DESEJA FAZER?\n";
       cout<<"SAIR-0\nINSERIR FRUTA(S)-1\nEXIBIR DICIONÁRIO-2\nEXCLUIR FRUTA(S)-3\nALTERAR FRUTA(S)-4\n:";
       cin>>op;
       switch(op){
       case 0:
           system("cls");
           cout<<"TCHAU";
       break;
       case 1:
           system("cls");
           inserir_fruta();
           system("pause");
       break;
       case 2:
           system("cls");
           menu_exibir();
           system("pause");
       break;
       case 3:
           system("cls");
           system("pause");
       break;
       case 4:
           system("cls");
           system("pause");
       break;
       default:
        cout<<"\nOpção inválida, tente novamente!\n";
        system("pause");
       break;
       }
    }while(op!=0);
}

int main() {
    setlocale(LC_ALL, "Portuguese");
    ler();
    menu();
}
